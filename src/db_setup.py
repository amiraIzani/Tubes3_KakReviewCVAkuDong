import mysql.connector
from mysql.connector import Error
import getpass
import os

# --- Configuration Constants ---
DATABASE_NAME = 'ats_db'
DATABASE_USER = 'ats_app_user'
DATABASE_PASSWORD = 'highly_secure_password123'  # Default, will be overridden


def _create_database_and_user(cursor, db_name, user, password):
    # Creates the database and a dedicated user with privileges.
    print(f"\n[INFO] Creating database '{db_name}'...")
    cursor.execute(f"CREATE DATABASE IF NOT EXISTS {db_name} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;")
    print(f"  - Database '{db_name}' is ready.")

    print(f"[INFO] Creating user '{user}'...")
    try:
        cursor.execute(f"CREATE USER '{user}'@'localhost' IDENTIFIED BY '{password}';")
        print(f"  - User '{user}' created successfully.")
    except Error as e:
        if e.errno == 1396:  # User already exists
            print(f"  - User '{user}' already exists. Updating password.")
            cursor.execute(f"ALTER USER '{user}'@'localhost' IDENTIFIED BY '{password}';")
        else:
            raise

    print(f"[INFO] Granting privileges on '{db_name}' to '{user}'...")
    cursor.execute(f"GRANT ALL PRIVILEGES ON {db_name}.* TO '{user}'@'localhost';")
    cursor.execute("FLUSH PRIVILEGES;")
    print("  - Privileges granted.")

def _create_env_file(project_root, db_name, user, password):
    # Generates the .env file with the application's database credentials.
    env_path = os.path.join(project_root, '.env')
    
    if os.path.exists(env_path):
        overwrite = input(f"\n[WARNING] '.env' file already exists. Do you want to overwrite it? (y/n): ").lower()
        if overwrite != 'y':
            print("[INFO] Skipping .env file creation.")
            return

    print("\n[INFO] Generating .env file...")
    env_content = (
        f"# Auto-generated by setup_db.py\n"
        f"ATS_DB_HOST=localhost\n"
        f"ATS_DB_USER={user}\n"
        f"ATS_DB_PASS={password}\n"
        f"ATS_DB_NAME={db_name}\n"
    )
    
    with open(env_path, 'w') as f:
        f.write(env_content)
    
    print(f"\033[92m  - Successfully created .env file at {env_path}\033[0m")

def run_database_setup():
    # Main function to orchestrate the database setup process.
    db_connection = None
    try:
        # Connect to MySQL with administrative credentials
        root_user = input("Enter your MySQL admin username (default 'root'): ") or 'root'
        root_password = getpass.getpass(f"Enter password for '{root_user}': ")

        print("\n[INFO] Attempting to connect to MySQL server...")
        db_connection = mysql.connector.connect(
            host='localhost',
            user=root_user,
            password=root_password
        )
        db_cursor = db_connection.cursor()
        print("\033[92m  - Connection successful.\033[0m")
        
        _create_database_and_user(db_cursor, DATABASE_NAME, DATABASE_USER, DATABASE_PASSWORD)
        
        # Create the .env file
        project_root_dir = os.path.dirname(os.path.abspath(__file__))
        _create_env_file(project_root_dir, DATABASE_NAME, DATABASE_USER, DATABASE_PASSWORD)

        print("\n\033[92mSetup finished successfully!\033[0m")
        print("You can now run the main application to create tables and seed data (e.g., `python -m src.main`).")

    except Error as e:
        print(f"\n\033[91m[ERROR] A database error occurred: {e}\033[0m")
        print("\033[91mPlease ensure the MySQL server is running and your credentials are correct.\033[0m")
    
    finally:
        if db_connection and db_connection.is_connected():
            db_cursor.close()
            db_connection.close()
            print("\n[INFO] Database connection closed.")

if __name__ == "__main__":
    run_database_setup()